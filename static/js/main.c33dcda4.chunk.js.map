{"version":3,"sources":["components/ConvertToBinary.js","components/ConvertToBinaryForm.js","App.js","index.js"],"names":["ConvertToBinary","props","inputText","data","asciiText","split","map","item","charCodeAt","join","binaryText","str","toString","toBinary","className","ConvertToBinaryForm","useState","userInputText","setUserInputText","setData","load","setLoad","onSubmit","e","preventDefault","target","reset","type","onChange","value","handleChange","placeholder","App","ReactDOM","render","document","getElementById"],"mappings":"0KA+CeA,MA7Cf,SAAyBC,GAAO,IACrBC,EAAaD,EAAME,KAAnBD,UACDE,EAAoBF,EAGXG,MAAM,IACRC,KAAI,SAAAC,GACD,OAAOA,EAAKC,gBAEfC,KAAK,KANZC,EAQN,SAAkBC,GACd,OAAOA,EAAIN,MAAM,IACNC,KAAI,SAAAC,GACD,OAAOA,EAAKC,aAAaI,SAAS,MAErCH,KAAK,KAbDI,CAASX,GAsB5B,OACI,sBAAKY,UAAU,YAAf,UACI,gCACI,6CACA,4BAAIZ,OAGR,gCACI,4CACA,4BAAIE,OAGR,gCACI,6CACA,4BAAIM,WCDLK,MArCf,SAA6Bd,GAAO,IAAD,EACWe,qBADX,mBACxBC,EADwB,KACTC,EADS,OAEPF,mBAAS,IAFF,mBAExBb,EAFwB,KAElBgB,EAFkB,OAGPH,oBAAS,GAHF,mBAGxBI,EAHwB,KAGlBC,EAHkB,KAiB/B,OAAO,gCACH,oBAAIP,UAAU,cAAd,4BACA,oBAAIA,UAAU,aAAd,wDACA,uBAAMQ,SAhBV,SAAsBC,GAClBA,EAAEC,iBACFD,EAAEE,OAAOC,QACTP,EAAQ,CACJjB,UAAYe,IAEhBI,GAAQ,IAUR,UACI,0BACIM,KAAK,OACLC,SAAU,SAACL,GAAD,OAVtB,SAAsBA,GAElBL,EAAiBK,EAAEE,OAAOI,OAQDC,CAAaP,IAC9BQ,YAAY,iBACZjB,UAAU,yBAEd,uBACIa,KAAK,SACLb,UAAU,sBAIjBM,EAAO,cAAC,EAAD,CAAiBjB,KAAMA,IAAU,S,MCxBlC6B,MATf,WACE,OACE,8BACE,cAAC,EAAD,OCFNC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c33dcda4.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\n\nfunction ConvertToBinary(props){\n    const {inputText} = props.data\n    const asciiText = toAscii(inputText)\n    const binaryText = toBinary(inputText)\n    function toAscii(str) {\n        return str.split('')\n                .map(item => {\n                    return item.charCodeAt()\n                })\n                .join(' ')\n    }\n    function toBinary(str){\n        return str.split('')\n                  .map(item => {\n                      return item.charCodeAt().toString(2)\n                  })\n                  .join(' ')\n    }\n    function fromAscii(str){\n        return str.split(' ')\n                  .map(item => {\n                      return String.fromCharCode(item)\n                  })\n                  .join(\"\")\n    }\n    return(\n        <div className=\"container\">\n            <div>\n                <h2>Input Text:</h2>\n                <p>{inputText}</p>\n            </div>\n            \n            <div>\n                <h2>Ascii Text</h2>\n                <p>{asciiText}</p>\n            </div>\n            \n            <div>\n                <h2>Binary Text</h2>\n                <p>{binaryText}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default ConvertToBinary","import React, {useState, useEffect} from 'react'\nimport ConvertToBinary from './ConvertToBinary'\n\nfunction ConvertToBinaryForm(props){\n    const [userInputText, setUserInputText] = useState()\n    const [data, setData] = useState({})\n    const [load, setLoad] = useState(false)\n    function handleSubmit(e){\n        e.preventDefault()\n        e.target.reset()\n        setData({\n            inputText : userInputText\n        })\n        setLoad(true)\n    }\n\n    function handleChange(e){\n        \n        setUserInputText(e.target.value)\n    }\n    return(<div>\n        <h1 className=\"main-header\">Text Converter</h1>\n        <h3 className=\"sub-header\">Convert your text to ASCII and Binary Code</h3>\n        <form onSubmit={handleSubmit}>\n            <textarea\n                type=\"text\"\n                onChange={(e) => handleChange(e)}\n                placeholder=\"Your Text Here\"\n                className=\"text-area full-width\"\n            />\n            <input \n                type=\"submit\"\n                className=\"btn btn-submit\"\n            />\n        </form>\n\n        {load ? <ConvertToBinary data={data}/> : null}\n    </div>)\n}\n\nexport default ConvertToBinaryForm","import ConvertToBinaryForm from './components/ConvertToBinaryForm'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <ConvertToBinaryForm />\n    </div>\n  )\n    \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\"\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}